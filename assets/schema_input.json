{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/metaval/master/assets/schema_input.json",
    "title": "nf-core/metaval pipeline - params.input schema",
    "description": "Schema for the file provided with params.input",
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "sample": {
                "type": "string",
                "exists": true,
                "pattern": "^\\S+$",
                "errorMessage": "Sample name must be provided and cannot contain spaces",
                "meta": ["sample"]
            },
            "run_accession": {
                "type": "string",
                "exists": true,
                "pattern": "^\\S+$",
                "errorMessage": "Run accession must be provided and cannot contain spaces",
                "meta": ["run_accession"]
            },
            "instrument_platform": {
                "type": "string",
                "exists": true,
                "enum": [
                    "ABI_SOLID",
                    "BGISEQ",
                    "CAPILLARY",
                    "COMPLETE_GENOMICS",
                    "DNBSEQ",
                    "HELICOS",
                    "ILLUMINA",
                    "ION_TORRENT",
                    "LS454",
                    "OXFORD_NANOPORE",
                    "PACBIO_SMRT"
                ],
                "errorMessage": "Suquencing platform must be provided."
            },
            "reads_type": {
                "type": "string",
                "exists": true,
                "enum": ["short", "long"],
                "errorMessage": "Reads type must be provided",
                "meta": ["reads_type"]
            },
            "fastq_1": {
                "type": "string",
                "exists": true,
                "format": "file-path",
                "pattern": "^\\S+\\.f(ast)?q\\.gz$",
                "errorMessage": "FastQ file for short reads 1 must be provided from bowtie2 unmapped read 1 against the human genome, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'."
            },
            "fastq_2": {
                "type": "string",
                "exists": true,
                "format": "file-path",
                "anyOf": [
                    {
                        "pattern": "^\\S+\\.f(ast)?q\\.gz$"
                    },
                    {
                        "maxLength": 0
                    }
                ],
                "errorMessage": "FastQ file for short reads 2 must be provided from bowtie2 unmapped read 2 against the human genome, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'"
            },
            "kraken2_report": {
                "type": "string",
                "format": "file-path",
                "pattern": "^\\S+\\.kraken2\\.kraken2\\.report\\.txt$",
                "errorMessage": "Kraken2 classification report must be provided."
            },
            "kraken2_classifiedout": {
                "type": "string",
                "format": "file-path",
                "pattern": "^\\S+\\.kraken2\\.kraken2\\.classifiedreads\\.txt$",
                "errorMessage": "The file contains the taxid and sequences ID."
            },
            "centrifuge_out": {
                "type": "string",
                "format": "file-path",
                "pattern": "^\\S+\\.centrifuge.txt$",
                "errorMessage": "Centrifuge kreport file must be provided."
            },
            "centrifuge_result": {
                "type": "string",
                "format": "file-path",
                "pattern": "^\\S+\\.centrifuge.results.txt$",
                "errorMessage": "Centrifuge result file must be provided, and it should contains eight columns: readID, seqID, taxID, score, 2ndBestScore, hitLength, queryLength, numMatches."
            },
            "diamond": {
                "type": "string",
                "format": "file-path",
                "pattern": "^\\S+\\.tsv$",
                "errorMessage": "Diamond classification result should be provided."
            }
        },
        "required": [
            "sample",
            "run_accession",
            "instrument_platform",
            "reads_type",
            "fastq_1",
            "kraken2_report",
            "kraken2_classifiedout",
            "centrifuge_out",
            "centrifuge_result"
        ]
    }
}
